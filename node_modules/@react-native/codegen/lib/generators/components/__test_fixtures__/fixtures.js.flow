/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow strict-local
 * @format
 */

'use strict';

import type {SchemaType} from '../../../CodegenSchema.js';

const NO_PROPS_NO_EVENTS: SchemaType = {
  modules: {
    NoPropsNoEvents: {
      type: 'Component',
      components: {
        NoPropsNoEventsComponent: {
          extendsProps: [
            {
              type: 'ReactNativeBuiltInType',
              knownTypeName: 'ReactNativeCoreViewProps',
            },
          ],
          events: [],
          props: [],
          commands: [],
        },
      },
    },
  },
};

const INTERFACE_ONLY: SchemaType = {
  modules: {
    Switch: {
      type: 'Component',
      components: {
        InterfaceOnlyComponent: {
          interfaceOnly: true,
          paperComponentName: 'RCTInterfaceOnlyComponent',
          extendsProps: [
            {
              type: 'ReactNativeBuiltInType',
              knownTypeName: 'ReactNativeCoreViewProps',
            },
          ],
          events: [
            {
              name: 'onChange',
              optional: true,
              bubblingType: 'bubble',
              typeAnnotation: {
                type: 'EventTypeAnnotation',
                argument: {
                  type: 'ObjectTypeAnnotation',
                  properties: [
                    {
                      name: 'value',
                      optional: false,
                      typeAnnotation: {
                        type: 'BooleanTypeAnnotation',
                      },
                    },
                  ],
                },
              },
            },
          ],
          props: [
            {
              name: 'accessibilityHint',
              optional: true,
              typeAnnotation: {
                type: 'StringTypeAnnotation',
                default: '',
              },
            },
          ],
          commands: [],
        },
      },
    },
  },
};

const EVENTS_WITH_PAPER_NAME: SchemaType = {
  modules: {
    Switch: {
      type: 'Component',
      components: {
        InterfaceOnlyComponent: {
          interfaceOnly: true,
          paperComponentName: 'RCTInterfaceOnlyComponent',
          extendsProps: [
            {
              type: 'ReactNativeBuiltInType',
              knownTypeName: 'ReactNativeCoreViewProps',
            },
          ],
          events: [
            {
              name: 'onChange',
              paperTopLevelNameDeprecated: 'paperChange',
              optional: true,
              bubblingType: 'bubble',
              typeAnnotation: {
                type: 'EventTypeAnnotation',
                argument: {
                  type: 'ObjectTypeAnnotation',
                  properties: [
                    {
                      name: 'value',
                      optional: false,
                      typeAnnotation: {
                        type: 'BooleanTypeAnnotation',
                      },
                    },
                  ],
                },
              },
            },
            {
              name: 'onDire tChange',
              paperTopLevelNameDeprecated: 'paperDirectChange',
              optional: true,
              bubblingType: 'direct',
              typeAnnotation: {
                type: 'EventTypeAnnotation',
                argument: {
                  type: 'ObjectTypeAnnotation',
                  properties: [
                    {
                      name: 'value',
                      optional: false,
                      typeAnnotation: {
                        type: 'BooleanTypeAnnotation',
                      },
                    },
                  ],
                },
              },
            },
          ],
          props: [],
          commands: [],
        },
      },
    },
  },
};

const BOOLEAN_PROP: SchemaType = {
  modules: {
    Switch: {
      type: 'Component',
      components: {
        BooleanPropNativeComponent: {
          extendsProps: [
            {
              type: 'ReactNativeBuiltInType',
              knownTypeName: 'ReactNativeCoreViewProps',
            },
          ],
          events: [],
          props: [
            {
              name: 'disabled',
              optional: true,
              typeAnnotation: {
                type: 'BooleanTypeAnnotation',
                default: false,
              },
            },
          ],
          commands: [],
        },
      },
    },
  },
};

const STRING_PROP: SchemaType = {
  modules: {
    Switch: {
      type: 'Component',
      components: {
        StringPropComponent: {
          extendsProps: [
            {
              type: 'ReactNativeBuiltInType',
              knownTypeName: 'ReactNativeCoreViewProps',
            },
          ],
          events: [],
          props: [
            {
              name: 'accessibilityHint',
              optional: true,
              typeAnnotation: {
                type: 'StringTypeAnnotation',
                default: '',
              },
            },
            {
              name: 'accessibilityRole',
              optional: true,
              typeAnnotation: {
                type: 'StringTypeAnnotation',
                default: null,
              },
            },
          ],
          commands: [],
        },
      },
    },
  },
};

const INTEGER_PROPS: SchemaType = {
  modules: {
    Switch: {
      type: 'Component',
      components: {
        IntegerPropNativeComponent: {
          extendsProps: [
            {
              type: 'ReactNativeBuiltInType',
              knownTypeName: 'ReactNativeCoreViewProps',
            },
          ],
          events: [],
          props: [
            {
              name: 'progress1',
              optional: true,
              typeAnnotation: {
                type: 'Int32TypeAnnotation',
                default: 0,
              },
            },
            {
              name: 'progress2',
              optional: true,
              typeAnnotation: {
                type: 'Int32TypeAnnotation',
                default: -1,
              },
            },
            {
              name: 'progress3',
              optional: true,
              typeAnnotation: {
                type: 'Int32TypeAnnotation',
                default: 10,
              },
            },
          ],
          commands: [],
        },
      },
    },
  },
};

const FLOAT_PROPS: SchemaType = {
  modules: {
    Switch: {
      type: 'Component',
      components: {
        FloatPropNativeComponent: {
          extendsProps: [
            {
              type: 'ReactNativeBuiltInType',
              knownTypeName: 'ReactNativeCoreViewProps',
            },
          ],
          events: [],
          props: [
            {
              name: 'blurRadius',
              optional: false,
              typeAnnotation: {
                type: 'FloatTypeAnnotation',
                default: 0.0,
              },
            },
            {
              name: 'blurRadius2',
              optional: true,
              typeAnnotation: {
                type: 'FloatTypeAnnotation',
                default: 0.001,
              },
            },
            {
              name: 'blurRadius3',
              optional: true,
              typeAnnotation: {
                type: 'FloatTypeAnnotation',
                default: 2.1,
              },
            },
            {
              name: 'blurRadius4',
              optional: true,
              typeAnnotation: {
                type: 'FloatTypeAnnotation',
                default: 0,
              },
            },
            {
              name: 'blurRadius5',
              optional: true,
              typeAnnotation: {
                type: 'FloatTypeAnnotation',
                default: 1,
              },
            },
            {
              name: 'blurRadius6',
              optional: true,
              typeAnnotation: {
                type: 'FloatTypeAnnotation',
                defaÕÌ§çˇπü–≠6i˝∂]]ı2∆Æ‡Òhâ≥sπÈ®jû≠î#ÜÀÍ1ıÿ=∂ﬂ™sÅ6éxFé—-ßŸtõ,ëJÈ_¯"◊(sÆ]fë\úﬂò87g(oíl≥A≥[Öﬂ…ZPûU©Ìñ„‚ÿ˙©≥+á†ó"ıã7«[µy+ÁûwTF‚æ]V•º+5ü«2◊qáh=»Ë]∞≠˘V÷™1c°KÆú^\Û0ÁC'-Öå7fÑ–„ïÍ’j€kzaè∂≈ó≠RZ—ÊVF
Èí¡ØÆoÃfΩw¯Ω˘˚l˚˚’ém
º)úèΩ§9æÉHeÊû‹j∫H.y≠ˆp^ıπ›æQÚîrv˛5ªﬁHª,Äöw‡|›µ}‚¸t?ÁÎáΩéAvg.FÖÍíc∑<¿<ˆ≤∆ﬂQ2:n/≠3'Ò*Ú“’ÚAH<+]ß∂Zºπ¨knt?‰HîÃí’ûÕ˙ƒ5-3@â•]"‰v”Ú§≠/≤˚ÎÕaªÏFe/ìb∫Æ∑Æk∂˘™^2ÂÉzéck◊Ù8m)	◊%
¥˜,k—./ m$âü®ÛŒÛéq%iÁ“j“‰4UÀ∫ûWa)˝ÿıLÃ,Û36⁄¡*Âdã◊P<÷aOIÛ≠ ≠ˆ Gê~Ã˘ú‰:rŒ*ñªë˛∑Ê7’πÆGà€yp^Ûº_Æ˝FR«HªCRt4Õ)˘ÁÆ!ä™≈ÊTU‚H$3Êh¨§1˝÷´UÓKı∆¥-9~õjLhÔ¶Ω#v)+2µUJLÂÏ\'b}hªrˇŸµ°⁄™õ§4≥Â8ì≈Êˆúz†Áì¨¢ùÆTõÕŒ≠"⁄O∑µì˜ﬁû£(Ö˚¿)ù_…CGõóÁ≥ã©ØYme(GMéHcΩü≠ËxnÇºd∑º:o“mÑyé{4>DZ˚Õëu:–ï‹4‹o¢ΩπÁ0j+¯YbTxnó•”(Ì)V^Ÿ¥Ê¨ƒt¥;]ãæJom÷»íê}«ìÁÇyà6n›k”ÚÄ’ˆG;ÚÖkÒ~“±ÚÊØY>4˚KJ◊tˆÒŒ”˝C õacjÁTïﬂËÌ≤Tm{Œúü˝5‘i˛Öˇˇ˛g_<|vz˙Ïì˛˘Ÿüùü˝M”xé¨ø%og´&|:è¥⁄"Óhû3ï}é”vÓƒ‹¬e2I⁄àˆÜ•ªi2lõènC¥p¿ÿëiÒπ!D©ıNÍ#¡öm£K›ÿ.œî>+àTÂ‹∞‘:ÿ85iyg!ohäij◊Ÿ1Wa∫&y&Zá{	•t©qNxún¨˘ò∑Øj~≤ÙÉs∫xÀ]bÏø	<m%â∫¨xITxM‹˜åØúƒÒè‘]ÒÁà<!ø
Ìﬁ/c@dû+FvK¨DQ ªﬁ∫◊s›$≈Ìf3¬+’ÿˇΩ€ Êø£b)«Qí1_Z9≤2p2IœQAx¥v'îÁé[Œs–h)"É§[È’5vZî˚Ñáx‘{nêÙî˚f`.∑MóFZy|‰à5ùø;˛§yÎtC¥wı'ÉîGwñˆD»ì¯ΩGèONø|⁄ˇÉœO>|ˆ–ﬂ©ˇÂ¸˘èC~ƒ‡ﬂ˘”ÛÁr~ˆè…/¸'Mìÿg¨ÒÖX´m=yª®€.Q_ƒ7©Ãüﬂ%$?tﬂÉ¸…iÔ∏Û>ßve˚y¢ZÅ!˙6]Áö«BıLYéWGÚÃŒ˚seD∂]gª]Zl±ˆ>„Å|NsﬂèEÙË|gòŒˆ#∂lπwØƒü-…yÿh»3Õ:|™Õo£—ı=*´¥˙Ω{|£ØµûÍ˝Î†ë ø’Ô7]¯_YCíË|Q-´¶Ä|«*-»⁄*ï´Qœce”N€Ï€*Êk]ŒER?ÆDó’‘˝uQCf≠|bÂ vYA=ZßK≠è^kØ‚q¸Ë„'ßOOøˇ¨ˇ‡ŸÈìˆKãÌã˙Ì°«b¶’ÌÆ]5pÉ˜Âπœ∂˛¸≠¯)‚a˙3Ï˜ëf8\ƒ±W+Æœb^â˙-ı~tÓ?˜ 5-Ëè˚˚èOûú>:È√á?Ü0ê_Ç–;…M’o(U»a<âkûõ4A7n¿S‚ˆ®ø~˚›èûlœ&˛∑I˛7¸vg•M;∆"ÊyZA˙ƒqﬁlÙ‹ö].[/%Rb◊x∆=?ﬂô√úû)Åö˝Ë+éÿ≈ÎiYàüA¥çbúı®L∑VUù≤6Z⁄ÑïA›b}NU;N⁄ç”M-z]œ©â„˚NÛ˚sí`Aò:¨ É;Ö—ÿ”àëMóbyÜEŒÖßÕQ∑CmD´ÌJ‘vn∏4N4≈ˆr{‚FC8GπS“g≤‚|∏Ω(Ω…€˝Çˆ29HãôB‹ªÙ„6ÈÛ»EK46œnN>W;—”`‡tM%≠Br®“Úuá2ˇˆqﬂMÃÁ1‹MJfÒ—£nëüÜ;É0‰ÄK3ñ6ΩTãºÍ∆≈n·})ΩÕ†x4ˆ≈
œﬂ*Ì∏∏ìVÓ[ôA‘ä˚j˜T
;Î˙≥“y§úyÊÈÈ¬ôÿ∏ÑÊKvﬁEá#›…sÖsµÙS“äúÍﬁQW⁄ñæ*Z(;;f⁄oÕﬂ9˜2kè´±ºûQé—||tˇØ‚Œ˛D%Z~Qø≤¸~¬÷dVI¬ÿ•}Ÿñ'˘MOìΩô˙QìÌB"B•L*È±õü^Ω3"?[sü±ÀB∂	Îñ∆»‰µ∫¨˘6.ö«ë¸£Ó$¯Üî&5ﬁ ¿BöŒ1`r38=∫èóùìåepÀcÂ≥Q#—:÷D,â—•CófÍ"√{y/1}…È„á_¸Àaˇ›èf ¿ˇË¸Ï'`˛˘ØA™?˚˘˘Û?}w˚£Yã‘E?|ssQ|ÁgXˇ„'1~9T˘Î>T˘πy≤@∑¯¿∏Y∆›‚ŒQlgn;jß∞„€àr$„§I’ÄÆqÜm>Cıx≤¥R+’8Àso[’ÆR˚>gœNy"Ò?∆õK_ü˘ï‚wµQ÷G›WπﬂPÊ±ngÛ∫ãÚ≤Kc{…∑î|êŸf)%∑ífN‚ÈÃÛã◊ˆÌ02ã¡">£uœ–‹'HÁõ¥Sπ˜Ââ˛ˇyø4û≤‰y∑¥bHπ$_a¨w∆x4?2Okö±∏´'3œ/rªπ€§®‘"~è≤:Ax+≠”⁄L±∂Z’‚˜ç¶ˇ•—OƒËmkAÓóaèü|M_éó)….muóh6ü¯Ω˚F◊Ø;1n◊b3ïsÙÙçπÏÉ≠pøﬂ›5ïS_ÑbN@ºÎd¡Æx®∆ı|¬e•ËóÌèﬂ5jª∆ÛÛ∫‰®÷1`z~È6?ˆ°±6ØwYˆ∫÷	í.Ò,–⁄‚òÍ|à5é£Ëa√~ôı„e≈»∫}>ôÛ—t˜K˙–2£÷bs˛zŸ4'>ŒrÍ®í®ùGC:ó¢º∂ì›ú˘›BûDÓËé¬3rÏ(⁄J÷+ÂP≤⁄$£];3a˜c'Ò =·Ò°≈x4Oí¨·ˆJÃ5=lp•±Giêû©/*ºµEπO!áR¿À»nØ…‰(Qÿ´€EÏ“;qã Öñ6ëÎ8:À=@·vî!œSÅå|ƒ5◊Òﬂ3î(*Fdˇ˚˘˘˜Û#Û•Râpáne Z<ˆMÏ≠åÏ„Ãπó)fﬂÃÛèÆÃ)G\f{:qeMÙE2]’j@b5 ó"„ªF7¶ﬁ÷©"1∆2¢ì—à≤~wösï8V˛nn);t“∏IZñëûrÃ8è¡o¸œ&Eiµ‹–∂≠€Î»Øç⁄Y˘LÚÁ∞&≈ÜÎ˙5Æf ŒF÷Õ{b©Gñ{Fpú~-Góå≥üÄ∂Œπ0”\M]+·yÿÄß–NàV4?tyÂÓ∆Âˇì€ÿë|]ôbR©ó,8ˆ_‰ XZM, øØÂÌœÔ€º™˜w¸œg~Oû@ìgﬂΩ¸‰¸Î<RçÇe{iº‚íÄ•gà‡%G>}∏Ôjî“—ª˜ÌÜlT“GU¢É•¢å5iè1Evô˚õ3ÅpûÚ°-s®#'§›m¶˚Ã˜Ø<ªd-˝YÂÛ26úÎrmŸ)Õ4u ¸d◊Ì˙ﬂÙ˘Ñ∞ft+ |4úÈÜW˙@†&#s¶€±!®œÈc[,~)=”]@Øg{,’≠!ygMYâ{-K∑HTSñ≠c,+§Ò≤HQ¡OÔ‹6mQÚ¨ªïœî+Ç[»g#u"ê2VD˛”‘#DjÎ?Aæ,{N 2‹Ó[QOóëiZ6';]fL¶;ÉJ’∑\jπåë„]†ªÜŒ$Æ1V©–jË≠69]HŸVèÛ·˛PÜ∆JX2ä1è?¢Sòs8åuDΩ ÈßkMõÁß˜N{•Y"ho¬˙ßüÀ|øWLıºíÁ Ôyœ?ıÏù|ê’†–s7‰8ö%”i2S˜Q•(8 "T}>çSïöLÆ«‘s9•Z{éã≥à+ªÈ÷Ê∑Fﬁ
\ÉÍüÀyÒû…9pÌ¨<◊cÂ~ßıûtÚ%&¨çyÜÙ≠Ë∂ÁñoÜ¨jƒY´¥¨ª9b"´b.A.åowßxì=êNÍÔÒóßkÿî-Ú[MÌÍÃÈº≠›Ô~4{Ÿ≥GèÙ"ÜÛ˛Fˇ‰·=˙¯·”π	=ÿ‰ÒΩhNˇÔ`H/õz~¶˘'Î⁄Ê ◊,Kí≥ Æ5¯¥q›U¥qé!ﬁÂ4èè˝Ó"9ÄJür¸>úœ˚féûı€˝≠˛˙§ø~«/◊ﬂ¬r˝§Å≠ˇ˛¯ÓZ<iòIÖ+5ˆùÃÇœlÕü√‹(¸ti≈ÃÎ¨‰ÌßoP∂2ÓÁÅ◊ éŒŒπÍ(™/ı)‘+«ñow}≥>MK
Ôt}Ú
ú°ôIè(9#Í◊o>o>Ø
=ÎìîÅk’d1&⁄†SÔ„ZNJù»¨˛SßeÂµÔ-K«eà@ïºÛÜìY	5¡ÄQÃ‘µ-Kıú˛éó•∆ô∆ßeH ÔG¬ÉáÛwÚûâ ù?k¬ﬂÔC¨€Õo^∞Ø•’}Oü7ü˘øPœ˛∏!?Mƒ"é6é´ºÎéÊ£¶q¨rÌ˛‚<∞wdrùR∂[<M‡|áÛwevÉº>üçWÎ5ÌÀ(ùöî’uEÙ<oeUY≠<œ.úÌ˚…Ï‰π‘™”æqMÀR“©«ÕJy7?≠ﬂ>8E ’jø∂Àdè©‘´ÔÍ—¥9BòZ’ùŒ˝småvÂÈ›9´˙oÜuÇ{D‰}†[e≤§ﬁ?FvÃbˆK%Œj5=õRz‰ÈQÙÌƒ›	4˛YYb˝st*¬ ø5˜¡,µ¬¥Ø‘^ÑyñAª≤¡8ÓÃpo¶⁄f»Æy3Àéi≠“(˙ ÊœΩ -≠≈8)î±ﬂv˚∑D;{- JªV≠ìÒºV°ƒ +ä47uîˇl  Ù#„}Ú9â≈ÅˆSﬁßÂ";àı«Ú(Z‰@¥Ø4W+™A´'m›Ïõép§£8≥ë8Ô7†ï’®˘»⁄õ9uˆÊypeName: 'ReactNativeCoreViewProps',
            },
          ],
          events: [],
          props: [
            {
              name: 'contentInset',
              optional: true,
              typeAnnotation: {
                type: 'ReservedPropTypeAnnotation',
                name: 'EdgeInsetsPrimitive',
              },
            },
          ],
          commands: [],
        },
      },
    },
  },
};

const DIMENSION_PROP: SchemaType = {
  modules: {
    CustomView: {
      type: 'Component',
      components: {
        DimensionPropNativeComponent: {
          extendsProps: [
            {
              type: 'ReactNativeBuiltInType',
              knownTypeName: 'ReactNativeCoreViewProps',
            },
          ],
          events: [],
          props: [
            {
              name: 'marginBack',
              optional: true,
              typeAnnotation: {
                type: 'ReservedPropTypeAnnotation',
                name: 'DimensionPrimitive',
              },
            },
          ],
          commands: [],
        },
      },
    },
  },
};

const ARRAY_PROPS: SchemaType = {
  modules: {
    Slider: {
      type: 'Component',
      components: {
        ArrayPropsNativeComponent: {
          extendsProps: [
            {
              type: 'ReactNativeBuiltInType',
              knownTypeName: 'ReactNativeCoreViewProps',
            },
          ],
          events: [],
          props: [
            {
              name: 'names',
              optional: true,
              typeAnnotation: {
                type: 'ArrayTypeAnnotation',
                elementType: {
                  type: 'StringTypeAnnotation',
                },
              },
            },
            {
              name: 'disableds',
              optional: true,
              typeAnnotation: {
                type: 'ArrayTypeAnnotation',
                elementType: {
                  type: 'BooleanTypeAnnotation',
                },
              },
            },
            {
              name: 'progress',
              optional: true,
              typeAnnotation: {
                type: 'ArrayTypeAnnotation',
                elementType: {
                  type: 'Int32TypeAnnotation',
                },
              },
            },
            {
              name: 'radii',
              optional: true,
              typeAnnotation: {
                type: 'ArrayTypeAnnotation',
                elementType: {
                  type: 'FloatTypeAnnotation',
                },
              },
            },
            {
              name: 'colors',
              optional: true,
              typeAnnotation: {
                type: 'ArrayTypeAnnotation',
                elementType: {
                  type: 'ReservedPropTypeAnnotation',
                  name: 'ColorPrimitive',
                },
              },
            },
            {
              name: 'srcs',
              optional: true,
              typeAnnotation: {
                type: 'ArrayTypeAnnotation',
                elementType: {
                  type: 'ReservedPropTypeAnnotation',
                  name: 'ImageSourcePrimitive',
                },
              },
            },
            {
              name: 'points',
              optional: true,
              typeAnnotation: {
                type: 'ArrayTypeAnnotation',
                elementType: {
                  type: 'ReservedPropTypeAnnotation',
                  name: 'PointPrimitive',
                },
              },
            },
            {
              name: 'dimensions',
              optional: true,
              typeAnnotation: {
                type: 'ArrayTypeAnnotation',
                elementType: {
                  type: 'ReservedPropTypeAnnotation',
                  name: 'DimensionPrimitive',
                },
              },
            },
            {
              name: 'sizes',
              optional: true,
              typeAnnotation: {
                type: 'ArrayTypeAnnotation',
                elementType: {
                  type: 'StringEnumTypeAnnotation',
                  default: 'small',
                  options: ['small', 'large'],
                },
              },
            },
            {
              name: 'object',
              optional: true,
              typeAnnotation: {
                type: 'ArrayTypeAnnotation',
                elementType: {
                  type: 'ObjectTypeAnnotation',
                  properties: [
                    {
                      name: 'stringProp',
                      optional: true,
                      typeAnnotation: {
                        type: 'StringTypeAnnotation',
                        default: '',
                      },
                    },
                  ],
                },
              },
            },
            {
              name: 'array',
              optional: true,
              typeAnnotation: {
                type: 'ArrayTypeAnnotation',
                elementType: {
                  type: 'ObjectTypeAnnotation',
                  properties: [
                    {
                      // This needs to stay the same as the object above
                      // to confirm that the structs are generated
                      // with unique non-colliding names
                      name: 'object',
                      optional: true,
                      typeAnnotation: {
                        type: 'ArrayTypeAnnotation',
                        elementType: {
                          type: 'ObjectTypeAnnotation',
                          properties: [
                            {
                              name: 'stringProp',
                              optional: true,
                              typeAnnotation: {
                                type: 'StringTypeAnnotation',
                                default: '',
                              },
                            },
                          ],
                        },
                      },
                    },
                  ],
                },
              },
            },
            {
              name: 'arrayOfArrayOfObject',
              optional: true,
              typeAnnotation: {
                type: 'ArrayTypeAnnotation',
                elementType: {
                  type: 'ArrayTypeAnnotation',
                  elementType: {
                    type: 'ObjectTypeAnnotation',
                    properties: [
                      {
                        name: 'stringProp',
                        optional: true,
                        typeAnnotation: {
                          type: 'StringTypeAnnotation',
                          default: '',
                        },
                      },
                    ],
                  },
                },
              },
            },
          ],
          commands: [],
        },
      },
    },
  },
};

const ARRAY_PROPS_WITH_NESTED_OBJECT: SchemaType = {
  modules: {
    Slider: {
      type: 'Component',
      components: {
        ArrayPropsNativeComponent: {
          extendsProps: [
            {
              type: 'ReactNativeBuiltInType',
              knownTypeName: 'ReactNativeCoreViewProps',
            },
          ],
          events: [],
          props: [
            {
              name: 'nativePrimitives',
              optional: true,
              typeAnnotation: {
                type: 'ArrayTypeAnnotation',
                elementType: {
                  type: 'ObjectTypeAnnotation',
                  properties: [
                    {
                      name: 'colors',
                      optional: true,
                      typeAnnotation: {
                        type: 'ArrayTypeAnnotation',
                        elementType: {
                          type: 'ReservedPropTypeAnnotation',
                          name: 'ColorPrimitive',
                        },
                      },
                    },
                    {
                      name: 'srcs',
                      optional: true,
                      typeAnnotation: {
                        type: 'ArrayTypeAnnotation',
                        elementType: {
                          type: 'ReservedPropTypeAnnotation',
                          name: 'ImageSourcePrimitive',
                        },
                      },
                    },
                    {
                      name: 'points',
                      optional: true,
                      typeAnnotation: {
                        type: 'ArrayTypeAnnotation',
                        elementType: {
                          type: 'ReservedPropTypeAnnotation',
                          name: 'PointPrimitive',
                        },
                      },
                    },
                  ],
                },
              },
            },
          ],
          commands: [],
        },
      },
    },
  },
};

const OBJECT_PROPS: SchemaType = {
  modules: {
    ObjectPropsNativeComponent: {
      type: 'Component',
      components: {
        ObjectProps: {
          extendsProps: [
            {
              type: 'ReactNativeBuiltInType',
              knownTypeName: 'ReactNativeCoreViewProps',
            },
          ],
          events: [],
          props: [
            {
              name: 'objectProp',
              optional: true,
              typeAnnotation: {
                type: 'ObjectTypeAnnotation',
                properties: [
                  {
                    name: 'stringProp',
                    optional: true,
                    typeAnnotation: {
                      type: 'StringTypeAnnotation',
                      default: '',
                    },
                  },
                  {
                    name: 'booleanProp',
                    optional: true,
                    typeAnnotation: {
                      type: 'BooleanTypeAnnotation',
                      default: false,
                    },
                  },
                  {
                    name: 'floatProp',
                    optional: true,
                    typeAnnotation: {
                      type: 'FloatTypeAnnotation',
                      default: 0.0,
                    },
                  },
                  {
                    name: 'intProp',
                    optional: true,
                    typeAnnotation: {
                      type: 'Int32TypeAnnotation',
                      default: 0,
                    },
                  },
                  {
                    name: 'stringEnumProp',
                    optional: true,
                    typeAnnotation: {
                      type: 'StringEnumTypeAnnotation',
                      default: 'option1',
                      options: ['option1'],
                    },
                  },
                  {
                    name: 'intEnumProp',
                    optional: true,
                    typeAnnotation: {
                      type: 'Int32EnumTypeAnnotation',
                      default: 0,
                      options: [0],
                    },
                  },
                  {
                    name: 'objectArrayProp',
                    optional: false,
                    typeAnnotation: {
                      type: 'ObjectTypeAnnotation',
                      properties: [
                        {
                          name: 'array',
                          optional: true,
                          typeAnnotation: {
                            type: 'ArrayTypeAnnotation',
                            elementType: {
                              type: 'StringTypeAnnotation',
                            },
                          },
                        },
                      ],
                    },
                  },
                  {
                    name: 'objectPrimitiveRequiredProp',
                    optional: false,
                    typeAnnotation: {
                      type: 'ObjectTypeAnnotation',
                      properties: [
                        {
                          name: 'image',
                          optional: true,
                          typeAnnotation: {
                            type: 'ReservedPropTypeAnnotation',
                            name: 'ImageSourcePrimitive',
                          },
                        },
                        {
                          name: 'color',
                          optional: true,
                          typeAnnotation: {
                            type: 'ReservedPropTypeAnnotation',
                            name: 'ColorPrimitive',
                          },
                        },
                        {
                          name: 'point',
                          optional: true,
                          typeAnnotation: {
                            type: 'ReservedPropTypeAnnotation',
                            name: 'PointPrimitive',
                          },
                        },
                      ],
                    },
                  },
                  {
                    name: 'nestedPropA',
                    optional: false,
                    typeAnnotation: {
                      type: 'ObjectTypeAnnotation',
                      properties: [
                        {
                          name: 'nestedPropB',
                          optional: false,
                          typeAnnotation: {
                            type: 'ObjectTypeAnnotation',
                            properties: [
                              {
                                name: 'nestedPropC',
                                optional: true,
                                typeAnnotation: {
                                  type: 'StringTypeAnnotation',
                                  default: '',
                                },
                              },
                            ],
                          },
                        },
                      ],
                    },
                  },
                  {
                    name: 'nestedArrayAsProperty',
                    optional: false,
                    typeAnnotation: {
                      type: 'ObjectTypeAnnotation',
                      properties: [
                        {
                          name: 'arrayProp',
                          optional: false,
                          typeAnnotation: {
                            type: 'ArrayTypeAnnotation',
                            elementType: {
                              type: 'ObjectTypeAnnotation',
                              properties: [
                                {
                                  name: 'stringProp',
                                  optional: false,
                                  typeAnnotation: {
                                    type: 'StringTypeAnnotation',
                                    default: '',
                                  },
                                },
                              ],
                            },
                          },
                        },
                      ],
                    },
                  },
                ],
              },
            },
          ],
          commands: [],
        },
      },
    },
  },
};

const MULTI_NATIVE_PROP: SchemaType = {
  modules: {
    Slider: {
      type: 'Component',
      components: {
        ImageColorPropNativeComponent: {
          extendsProps: [
            {
              type: 'ReactNativeBuiltInType',
              knownTypeName: 'ReactNativeCoreViewProps',
            },
          ],
          events: [],
          props: [
            {
              name: 'thumbImage',
              optional: true,
              typeAnnotation: {
                type: 'ReservedPropTypeAnnotation',
                name: 'ImageSourcePrimitive',
              },
            },
            {
              name: 'color',
              optional: true,
              typeAnnotation: {
                type: 'ReservedPropTypeAnnotation',
                name: 'ColorPrimitive',
              },
            },
            {
              name: 'thumbTintColor',
              optional: true,
              typeAnnotation: {
                type: 'ReservedPropTypeAnnotation',
                name: 'ColorPrimitive',
              },
            },
            {
              name: 'point',
              optional: true,
              typeAnnotation: {
                type: 'ReservedPropTypeAnnotation',
                name: 'PointPrimitive',
              },
            },
          ],
          commands: [],
        },
      },
    },
  },
};

const STRING_ENUM_PROP: SchemaType = {
  modules: {
    Switch: {
      type: 'Component',
      components: {
        StringEnumPropsNativeComponent: {
          extendsProps: [
            {
              type: 'ReactNativeBuiltInType',
              knownTypeName: 'ReactNativeCoreViewProps',
            },
          ],
          events: [],
          props: [
            {
              name: 'alignment',
              optional: true,
              typeAnnotation: {
                type: 'StringEnumTypeAnnotation',
                default: 'center',
                options: ['top', 'center', 'bottom-right'],
              },
            },
          ],
          commands: [],
        },
      },
    },
  },
};

const INT32_ENUM_PROP: SchemaType = {
  modules: {
    Switch: {
      type: 'Component',
      components: {
        Int32EnumPropsNativeComponent: {
          extendsProps: [
            {
              type: 'ReactNativeBuiltInType',
              knownTypeName: 'ReactNativeCoreViewProps',
            },
          ],
          events: [],
          props: [
            {
              name: 'maxInterval',
              optional: true,
              typeAnnotation: {
                type: 'Int32EnumTypeAnnotation',
                default: 0,
                options: [0, 1, 2],
              },
            },
          ],
          commands: [],
        },
      },
    },
  },
};

const MIXED_PROP: SchemaType = {
  modules: {
    CustomView: {
      type: 'Component',
      components: {
        MixedPropNativeComponent: {
          extendsProps: [
            {
              type: 'ReactNativeBuiltInType',
              knownTypeName: 'ReactNativeCoreViewProps',
            },
          ],
          events: [],
          props: [
            {
              name: 'mixedProp',
              optional: false,
              typeAnnotation: {
                type: 'MixedTypeAnnotation',
              },
            },
          ],
          commands: [],
        },
      },
    },
  },
};

const EVENT_PROPS: SchemaType = {
  modules: {
    Switch: {
      type: 'Component',
      components: {
        EventsNativeComponent: {
          extendsProps: [
            {
              type: 'ReactNativeBuiltInType',
              knownTypeName: 'ReactNativeCoreViewProps',
            },
          ],
          events: [
            {
              name: 'onChange',
              optional: true,
              bubblingType: 'bubble',
              typeAnnotation: {
                type: 'EventTypeAnnotation',
                argument: {
                  type: 'ObjectTypeAnnotation',
                  properties: [
                    {
                      name: 'value',
                      optional: false,
                      typeAnnotation: {
                        type: 'BooleanTypeAnnotation',
                      },
                    },
                    {
                      name: 'source',
                      optional: true,
                      typeAnnotation: {
                        type: 'StringTypeAnnotation',
                      },
                    },
                    {
                      name: 'progress',
                      optional: true,
                      typeAnnotation: {
                        type: 'Int32TypeAnnotation',
                      },
                    },
                    {
                      name: 'scale',
                      optional: true,
                      typeAnnotation: {
                        type: 'FloatTypeAnnotation',
                      },
                    },
                  ],
                },
              },
            },
            {
              name: 'onEventDirect',
              optional: true,
              bubblingType: 'direct',
              typeAnnotation: {
                type: 'EventTypeAnnotation',
                argument: {
                  type: 'ObjectTypeAnnotation',
                  properties: [
                    {
                      name: 'value',
                      optional: false,
                      typeAnnotation: {
                        type: 'BooleanTypeAnnotation',
                      },
                    },
                  ],
                },
              },
            },
            {
              name: 'onOrientationChange',
              optional: true,
              bubblingType: 'direct',
              typeAnnotation: {
                type: 'EventTypeAnnotation',
                argument: {
                  type: 'ObjectTypeAnnotation',
                  properties: [
                    {
                      name: 'orientation',
                      optional: false,
                      typeAnnotation: {
                        type: 'StringEnumTypeAnnotation',
                        options: ['landscape', 'portrait'],
                      },
                    },
                  ],
                },
              },
            },
            {
              name: 'onEnd',
              optional: true,
              bubblingType: 'bubble',
              typeAnnotation: {
                type: 'EventTypeAnnotation',
              },
            },
          ],
          props: [
            {
              name: 'disabled',
              optional: true,
              typeAnnotation: {
                type: 'BooleanTypeAnnotation',
                default: false,
              },
            },
          ],
          commands: [],
        },
      },
    },
  },
};

const EVENT_NESTED_OBJECT_PROPS: SchemaType = {
  modules: {
    Switch: {
      type: 'Component',
      components: {
        EventsNestedObjectNativeComponent: {
          extendsProps: [
            {
              type: 'ReactNativeBuiltInType',
              knownTypeName: 'ReactNativeCoreViewProps',
            },
          ],
          events: [
            {
              name: 'onChange',
              optional: true,
              bubblingType: 'bubble',
              typeAnnotation: {
                type: 'EventTypeAnnotation',
                argument: {
                  type: 'ObjectTypeAnnotation',
                  properties: [
                    {
                      name: 'location',
                      optional: false,
                      typeAnnotation: {
                        type: 'ObjectTypeAnnotation',
                        properties: [
                          {
                            name: 'source',
                            optional: false,
                            typeAnnotation: {
                              type: 'ObjectTypeAnnotation',
                              properties: [
                                {
                                  name: 'url',
                                  optional: false,
                                  typeAnnotation: {
                                    type: 'StringTypeAnnotation',
                                  },
                                },
                              ],
                            },
                          },
                          {
                            name: 'x',
                            optional: false,
                            typeAnnotation: {
                              type: 'Int32TypeAnnotation',
                            },
                          },
                          {
                            name: 'y',
                            optional: false,
                            typeAnnotation: {
                              type: 'Int32TypeAnnotation',
                            },
                          },
                        ],
                      },
                    },
                  ],
                },
              },
            },
          ],
          props: [
            {
              name: 'disabled',
              optional: true,
              typeAnnotation: {
                type: 'BooleanTypeAnnotation',
                default: false,
              },
            },
          ],
          commands: [],
        },
      },
    },
  },
};

const TWO_COMPONENTS_SAME_FILE: SchemaType = {
  modules: {
    MyComponents: {
      type: 'Component',
      components: {
        MultiComponent1NativeComponent: {
          extendsProps: [
            {
              type: 'ReactNativeBuiltInType',
              knownTypeName: 'ReactNativeCoreViewProps',
            },
          ],
          events: [],
          props: [
            {
              name: 'disabled',
              optional: true,
              typeAnnotation: {
                type: 'BooleanTypeAnnotation',
                default: false,
              },
            },
          ],
          commands: [],
        },

        MultiComponent2NativeComponent: {
          extendsProps: [
            {
              type: 'ReactNativeBuiltInType',
              knownTypeName: 'ReactNativeCoreViewProps',
            },
          ],
          events: [],
          props: [
            {
              name: 'disabled',
              optional: true,
              typeAnnotation: {
                type: 'BooleanTypeAnnotation',
                default: true,
              },
            },
          ],
          commands: [],
        },
      },
    },
  },
};

const TWO_COMPONENTS_DIFFERENT_FILES: SchemaType = {
  modules: {
    ComponentFile1: {
      type: 'Component',
      components: {
        MultiFile1NativeComponent: {
          extendsProps: [
            {
              type: 'ReactNativeBuiltInType',
              knownTypeName: 'ReactNativeCoreViewProps',
            },
          ],
          events: [],
          props: [
            {
              name: 'disabled',
              optional: true,
              typeAnnotation: {
                type: 'BooleanTypeAnnotation',
                default: false,
              },
            },
          ],
          commands: [],
        },
      },
    },

    ComponentFile2: {
      type: 'Component',
      components: {
        MultiFile2NativeComponent: {
          extendsProps: [
            {
              type: 'ReactNativeBuiltInType',
              knownTypeName: 'ReactNativeCoreViewProps',
            },
          ],
          events: [],
          props: [
            {
              name: 'disabled',
              optional: true,
              typeAnnotation: {
                type: 'BooleanTypeAnnotation',
                default: true,
              },
            },
          ],
          commands: [],
        },
      },
    },
  },
};

const COMMANDS: SchemaType = {
  modules: {
    Switch: {
      type: 'Component',
      components: {
        CommandNativeComponent: {
          extendsProps: [
            {
              type: 'ReactNativeBuiltInType',
              knownTypeName: 'ReactNativeCoreViewProps',
            },
          ],
          events: [],
          props: [],
          commands: [
            {
              name: 'flashScrollIndicators',
              optional: false,
              typeAnnotation: {
                type: 'FunctionTypeAnnotation',
                params: [],
                returnTypeAnnotation: {
                  type: 'VoidTypeAnnotation',
                },
              },
            },
            {
              name: 'allTypes',
              optional: false,
              typeAnnotation: {
                type: 'FunctionTypeAnnotation',
                params: [
                  {
                    name: 'x',
                    optional: false,
                    typeAnnotation: {
                      type: 'Int32TypeAnnotation',
                    },
                  },
                  {
                    name: 'y',
                    optional: false,
                    typeAnnotation: {
                      type: 'FloatTypeAnnotation',
                    },
                  },
                  {
                    name: 'z',
                    optional: false,
                    typeAnnotation: {
                      type: 'DoubleTypeAnnotation',
                    },
                  },
                  {
                    name: 'message',
                    optional: false,
                    typeAnnotation: {
                      type: 'StringTypeAnnotation',
                    },
                  },
                  {
                    name: 'animated',
                    optional: false,
                    typeAnnotation: {
                      type: 'BooleanTypeAnnotation',
                    },
                  },
                ],
                returnTypeAnnotation: {
                  type: 'VoidTypeAnnotation',
                },
              },
            },
          ],
        },
      },
    },
  },
};

const COMMANDS_AND_PROPS: SchemaType = {
  modules: {
    Switch: {
      type: 'Component',
      components: {
        CommandNativeComponent: {
          extendsProps: [
            {
              type: 'ReactNativeBuiltInType',
              knownTypeName: 'ReactNativeCoreViewProps',
            },
          ],
          events: [],
          props: [
            {
              name: 'accessibilityHint',
              optional: true,
              typeAnnotation: {
                type: 'StringTypeAnnotation',
                default: '',
              },
            },
          ],
          commands: [
            {
              name: 'handleRootTag',
              optional: false,
              typeAnnotation: {
                type: 'FunctionTypeAnnotation',
                params: [
                  {
                    name: 'rootTag',
                    optional: false,
                    typeAnnotation: {
                      type: 'ReservedTypeAnnotation',
                      name: 'RootTag',
                    },
                  },
                ],
                returnTypeAnnotation: {
                  type: 'VoidTypeAnnotation',
                },
              },
            },
            {
              name: 'hotspotUpdate',
              optional: false,
              typeAnnotation: {
                type: 'FunctionTypeAnnotation',
                params: [
                  {
                    name: 'x',
                    optional: false,
                    typeAnnotation: {
                      type: 'Int32TypeAnnotation',
                    },
                  },
                  {
                    name: 'y',
                    optional: false,
                    typeAnnotation: {
                      type: 'Int32TypeAnnotation',
                    },
                  },
                ],
                returnTypeAnnotation: {
                  type: 'VoidTypeAnnotation',
                },
              },
            },
          ],
        },
      },
    },
  },
};

const EXCLUDE_ANDROID: SchemaType = {
  modules: {
    ExcludedAndroid: {
      type: 'Component',
      components: {
        ExcludedAndroidComponent: {
          excludedPlatforms: ['android'],
          extendsProps: [
            {
              type: 'ReactNativeBuiltInType',
              knownTypeName: 'ReactNativeCoreViewProps',
            },
          ],
          events: [],
          props: [],
          commands: [],
        },
      },
    },
  },
};

const EXCLUDE_ANDROID_IOS: SchemaType = {
  modules: {
    ExcludedAndroidIos: {
      type: 'Component',
      components: {
        ExcludedAndroidIosComponent: {
          excludedPlatforms: ['android', 'iOS'],
          extendsProps: [
            {
              type: 'ReactNativeBuiltInType',
              knownTypeName: 'ReactNativeCoreViewProps',
            },
          ],
          events: [],
          props: [],
          commands: [],
        },
      },
    },
  },
};

const EXCLUDE_IOS_TWO_COMPONENTS_DIFFERENT_FILES: SchemaType = {
  modules: {
    ComponentFile1: {
      type: 'Component',
      components: {
        ExcludedIosComponent: {
          excludedPlatforms: ['iOS'],
          extendsProps: [
            {
              type: 'ReactNativeBuiltInType',
              knownTypeName: 'ReactNativeCoreViewProps',
            },
          ],
          events: [],
          props: [],
          commands: [],
        },
      },
    },
    ComponentFile2: {
      type: 'Component',
      components: {
        MultiFileIncludedNativeComponent: {
          extendsProps: [
            {
              type: 'ReactNativeBuiltInType',
              knownTypeName: 'ReactNativeCoreViewProps',
            },
          ],
          events: [],
          props: [
            {
              name: 'disabled',
              optional: true,
              typeAnnotation: {
                type: 'BooleanTypeAnnotation',
                default: true,
              },
            },
          ],
          commands: [],
        },
      },
    },
  },
};

module.exports = {
  NO_PROPS_NO_EVENTS,
  INTERFACE_ONLY,
  BOOLEAN_PROP,
  STRING_PROP,
  INTEGER_PROPS,
  DOUBLE_PROPS,
  FLOAT_PROPS,
  COLOR_PROP,
  IMAGE_PROP,
  POINT_PROP,
  INSETS_PROP,
  DIMENSION_PROP,
  ARRAY_PROPS,
  ARRAY_PROPS_WITH_NESTED_OBJECT,
  OBJECT_PROPS,
  MULTI_NATIVE_PROP,
  STRING_ENUM_PROP,
  INT32_ENUM_PROP,
  MIXED_PROP,
  EVENT_PROPS,
  EVENTS_WITH_PAPER_NAME,
  EVENT_NESTED_OBJECT_PROPS,
  TWO_COMPONENTS_SAME_FILE,
  TWO_COMPONENTS_DIFFERENT_FILES,
  COMMANDS,
  COMMANDS_AND_PROPS,
  EXCLUDE_ANDROID,
  EXCLUDE_ANDROID_IOS,
  EXCLUDE_IOS_TWO_COMPONENTS_DIFFERENT_FILES,
};
